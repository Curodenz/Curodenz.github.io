<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Arch Linux 与 Windows 11 双系统时间问题的解决</title>
    <url>/2025/04/21/Arch-Linux-%E4%B8%8E-Windows-11-%E5%8F%8C%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%97%B4%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>重装 Arch + Windows 双系统后，我发现每当切换系统时，系统的时间总是会出现偏差。</p>
<p>Arch 下倒还好，系统会很快自动纠正好时间。但是我们非常好用的 Windows 系统却非常随机——纠不纠正、什么时候纠正都相当的随性，很多时候我都需要自己打开设置手动校准。</p>
<p>经过观察，我发现一个规律：两个系统之间的时间差很巧妙的是 <strong>8 个小时</strong>——正好是 UTC 时间与北京时间之间的时差，因此我猜测这可能与 Windows 和 Linux 对待 <strong>本地时间</strong> 与 <strong>UTC 时间</strong> 的机制有关。</p>
<p>在这篇<a href="https://zhuanlan.zhihu.com/p/683760086">知乎文章</a>里，我找到了问题所在和解决方案。</p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>Windows 采用的是 LocalTime 机制，直接将从 BIOS 中存储的时间视为<strong>本地时间</strong>，而 Arch Linux 则将 BIOS 中的时间视为 <strong>UTC 时间</strong>。</p>
<p>而且，在写入硬件时间时，Windows 直接把从网络同步的时间写入 BIOS，但是Arch Linux 则将网络时间减去时间偏移（对北京时间来说就是8小时），这就造成了两个系统时间的不一致。</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>按照这篇文章，我们先安装 <code>ntpdate</code> 工具：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 yay 安装</span></span><br><span class="line">$ yay -S ntpdate</span><br></pre></td></tr></table></figure>

<p>经过漫长的编译……BOOM！</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">==&gt; 错误： 在 build() 中发生一个错误。</span><br><span class="line">    正在放弃...</span><br><span class="line"> -&gt; 生成时出错: ntpdate-exit status 4</span><br><span class="line"> -&gt; 无法安装以下软件包, 需要手动介入处理:</span><br><span class="line">ntpdate - <span class="built_in">exit</span> status 4</span><br></pre></td></tr></table></figure>

<p>嘛，用 Arch Linux 也有一段时间了，对这种情况我已经见怪不怪了，往上翻翻，gcc 的报错信息这么提醒我们：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ntp_control.c: 在函数‘derive_nonce’中:</span><br><span class="line">ntp_control.c:3667:25: 错误：传递‘MD5Update’的第 2 个参数时在不兼容的指针类型间转换 [-Wincompatible-pointer-types]</span><br><span class="line"> 3667 |         MD5Update(&amp;ctx, salt, sizeof(salt));</span><br><span class="line">      |                         ^~~~</span><br><span class="line">      |                         |</span><br><span class="line">      |                         u_int32 * &#123;或称 unsigned int *&#125;</span><br><span class="line">包含于文件 ../include/ntp_md5.h:11,</span><br><span class="line">        于 ../include/ntp_stdlib.h:15,</span><br><span class="line">        于 ../include/ntp.h:13,</span><br><span class="line">        于 ../include/ntpd.h:11,</span><br><span class="line">        于 ntp_control.c:19:</span><br><span class="line">/usr/include/md5.h:37:31: 附注：需要类型‘const uint8_t *’ &#123;或称 ‘const unsigned char *’&#125;，但实参的类型为‘u_int32 *’ &#123;或称 ‘unsigned int *’&#125;</span><br><span class="line">   37 | void     MD5Update(MD5_CTX *, const uint8_t *, size_t);</span><br><span class="line">      |                               ^~~~~~~~~~~~~~~</span><br><span class="line">ntp_control.c:3668:25: 错误：传递‘MD5Update’的第 2 个参数时在不兼容的指针类型间转换 [-Wincompatible-pointer-types]</span><br><span class="line"> 3668 |         MD5Update(&amp;ctx, &amp;ts_i, sizeof(ts_i));</span><br><span class="line">      |                         ^~~~~</span><br><span class="line">      |                         |</span><br><span class="line">      |                         u_int32 * &#123;或称 unsigned int *&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>关键的信息便是 <code>传递‘MD5Update’的第 2 个参数时在不兼容的指针类型间转换 [-Wincompatible-pointer-types]</code>，看起来似乎是在调用 <code>MD5Update</code> 函数时，传递了<strong>不兼容的指针类型</strong>。</p>
<p>在 <a href="https://aur.archlinux.org/packages/ntpdate#comment-1016701">ntpdate 包的 AUR 页面下</a>，也有人提到了这个问题，并给出了解决方案：更改 <code>ntpdate</code> 包的 <code>PKGBUILD</code> 文件，在 <code>build()</code> 块中添加 <code>CFLAGS=&quot;$&#123;CFLAGS&#125; -Wno-incompatible-pointer-types&quot;</code> ，再重新构建即可。</p>
<p>方案已经给出，那就试试看吧！首先先查看本地缓存的 <code>ntpdate</code> 有关文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/.cache/yay/ntpdate/</span><br><span class="line">$ <span class="built_in">ls</span></span><br><span class="line">pkg  bug_3926_pthread_detach.patch  ntpdate.conf     PKGBUILD</span><br><span class="line">src  ntp-4.2.8p18.tar.gz            ntpdate.service</span><br></pre></td></tr></table></figure>

<p>接下来，编辑 <code>PKGBUILD</code> 文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim PKGBUILD</span><br></pre></td></tr></table></figure>

<p>更改 <code>build()</code> 块：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">build</span></span>() &#123;</span><br><span class="line">  CFLAGS=<span class="string">&quot;<span class="variable">$&#123;CFLAGS&#125;</span> -Wno-incompatible-pointer-types&quot;</span>  <span class="comment"># 添加这一行</span></span><br><span class="line">  <span class="built_in">cd</span> <span class="string">&quot;<span class="variable">$&#123;srcdir&#125;</span>/<span class="variable">$&#123;_pkgname&#125;</span>-<span class="variable">$&#123;_pkgver&#125;</span>&quot;</span></span><br><span class="line">  ./configure --prefix=/usr --libexecdir=/usr/lib</span><br><span class="line">  make</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>保存并退出，然后重新构建 <code>ntpdate</code> 包：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ makepkg -i -c</span><br></pre></td></tr></table></figure>

<p>这下就成功通过编译并安装了！</p>
<p>下一步，使用 <code>ntpdate</code> 同步时间：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> ntpdate time.windows.com</span><br></pre></td></tr></table></figure>

<p>最后，使用 <code>hwclock</code> 命令将硬件时间配置为本地时间——和 Windows 保持一致。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> hwclock --systohc --localtime</span><br></pre></td></tr></table></figure>

<p>完成！至此，两个系统间的时间应该就能保持一致了，可以重启检验一下。</p>
]]></content>
  </entry>
  <entry>
    <title>个人博客搭建小记</title>
    <url>/2025/03/11/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%B0%8F%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我认为，个人博客对鱼计算机学习者很重要，不仅因为搭建和管理个人博客是一项有趣的实践，同时写博客本身就是一个输出的过程：把学到的知识经过自己的整理和编排写成博客文章，同时还能记录自己当下的所感所想，一举两得。</p>
<p>当下，构建一个个人博客的门槛并不高——不需要一台自己的服务器，可以使用静态博客框架托管在 <a href="https://pages.github.com/">Github Pages</a> 上，也不需要自己完全从零开始构建，已经有了大量成熟的博客框架和美观的主题任君选择。</p>
<p>本文便是我个人搭建自己的博客的步骤，仅供记录，如有疏漏，还望不吝指教。</p>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>我使用 <a href="https://hexo.io/">Hexo</a> 作为博客的基本框架，<a href="https://theme-next.js.org/">NexT</a> 作为博客的主题，并将博客托管在 Github Pages 上。</p>
<h3 id="Nodejs-运行时安装与配置"><a href="#Nodejs-运行时安装与配置" class="headerlink" title="Nodejs 运行时安装与配置"></a>Nodejs 运行时安装与配置</h3><p>可以从<a href="https://nodejs.org/zh-cn/download">官方下载页</a>获取安装途径，也可以使用包管理器：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt install nodejs npm <span class="comment"># for debian &amp; ubuntu</span></span><br><span class="line"></span><br><span class="line">$ yay -S nodejs npm <span class="comment"># for Archlinux</span></span><br><span class="line"></span><br><span class="line">$ brew install node npm <span class="comment"># for MacOS with homebrew</span></span><br></pre></td></tr></table></figure>

<p>验证安装：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ node -v</span><br><span class="line">$ npm -v</span><br></pre></td></tr></table></figure>

<p>能看到输出便证明安装成功了。</p>
<p>对于没有梯子的朋友，建议配置 npm 的镜像源：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置腾讯云镜像源</span></span><br><span class="line">$ npm config <span class="built_in">set</span> registry http://mirrors.cloud.tencent.com/npm/ </span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置淘宝镜像源</span></span><br><span class="line">$ npm config <span class="built_in">set</span> registry https://registry.npmmirror.com</span><br></pre></td></tr></table></figure>

<h3 id="安装-Hexo-命令行工具"><a href="#安装-Hexo-命令行工具" class="headerlink" title="安装 Hexo 命令行工具"></a>安装 Hexo 命令行工具</h3><p>我使用 Hexo 作为博客的基本框架，因为它在保持简单的情况下能基本满足我的需求。</p>
<p>想搭建基于 Hexo 框架的个人博客，需要安装 Hexo 的命令行工具：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p>安装后，执行 <code>hexo</code> 命令，应该可以看到这样的输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Usage: hexo &lt;command&gt;</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  help     Get help on a command.</span><br><span class="line">  init     Create a new Hexo folder.</span><br><span class="line">  version  Display version information.</span><br><span class="line"></span><br><span class="line">Global Options:</span><br><span class="line">  --config  Specify config file instead of using _config.yml</span><br><span class="line">  --cwd     Specify the CWD</span><br><span class="line">  --debug   Display all verbose messages in the terminal</span><br><span class="line">  --draft   Display draft posts</span><br><span class="line">  --safe    Disable all plugins and scripts</span><br><span class="line">  --silent  Hide output on console</span><br><span class="line"></span><br><span class="line">For more help, you can use &#x27;hexo help [command]&#x27; for the detailed information</span><br><span class="line">or you can check the docs: https://hexo.io/docs/</span><br></pre></td></tr></table></figure>

<h2 id="博客设置"><a href="#博客设置" class="headerlink" title="博客设置"></a>博客设置</h2><h3 id="初始化博客"><a href="#初始化博客" class="headerlink" title="初始化博客"></a>初始化博客</h3><p>新建一个空文件夹作为博客的源文件夹：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> blog</span><br><span class="line">$ <span class="built_in">cd</span> blog</span><br></pre></td></tr></table></figure>

<p>初始化 Hexo：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ hexo init</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：这个过程会使用 git 命令从 Github 拉取文件，因为种种原因，Github 在国内无法稳定访问。可以通过 <a href="https://steampp.net/">Watt Toolkit</a> 或修改 DNS 文件访问，这里按下不表。</p>
<p>初始化成功后，应该能看到这样的输出：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">INFO  Start blogging with Hexo!</span><br></pre></td></tr></table></figure>

<h3 id="测试博客构建"><a href="#测试博客构建" class="headerlink" title="测试博客构建"></a>测试博客构建</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成博客页面</span></span><br><span class="line">$ hexo generate</span><br><span class="line"><span class="comment"># 在本地部署 Hexo 博客</span></span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>如果看到这样的输出，就说明构建好的博客已经成功在本地部署了</p>
<p>在浏览器中打开<a href="http://localhost:4000/">这个地址</a>就能看到你亲手搭建的博客了！</p>
<h3 id="博客基本信息设置"><a href="#博客基本信息设置" class="headerlink" title="博客基本信息设置"></a>博客基本信息设置</h3><p>博客文件夹中的 <code>_config.yml</code> 文件就是 <code>Hexo</code> 框架的配置文件。在文件中找到如下字段可以配置有关网站的各种信息</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Hexo</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">John</span> <span class="string">Doe</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">en</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：</p>
<ul>
<li><p><code>language</code> 字段配置的是网站的本地化语言，对于简体中文，它的值是 <code>zh-CN</code> ，而不是更常见的 <code>zh_CN</code> 。</p>
</li>
<li><p><code>timezone</code> 字段配置的是网站的时区。配置为 <code>Asia/Shanghai</code> 就是我们北京时间。</p>
</li>
</ul>
<h3 id="博客部署"><a href="#博客部署" class="headerlink" title="博客部署"></a>博客部署</h3><p><strong>注意</strong>：如果想要将博客部署在 Github Pages 上，首先必要的就是拥有一个 Github 账户，没有的话需要去注册一个。</p>
<p>新建一个以 <code>username.github.io</code> 命名的仓库，注意 <code>username</code> 应该替换为你的 Github 账户名。</p>
<blockquote>
<p>比如我的 Github 账户名是 <code>Curodenz</code>， 那么我应该新建一个叫做 <code>Curodenz.github.io</code> 的 Github 仓库。</p>
</blockquote>
<h3 id="下载和使用-NexT-主题"><a href="#下载和使用-NexT-主题" class="headerlink" title="下载和使用 NexT 主题"></a>下载和使用 NexT 主题</h3><p>在博客文件夹打开终端，输入以下命令来安装 NexT 主题：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-theme-next</span><br></pre></td></tr></table></figure>

<p>也可以使用 Git 安装：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/next-theme/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>

<p>安装完成后，在 <code>_config.yml</code> 文件中设置 <code>theme</code> 字段：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">next</span> </span><br></pre></td></tr></table></figure>
<p>清除之前生成的文件，再次进行生成和部署：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo generate</span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p><a href="http://localhost:4000/">打开浏览器</a>， 可以看到博客已经变成了 NexT 主题。</p>
<h3 id="NexT-主题设置"><a href="#NexT-主题设置" class="headerlink" title="NexT 主题设置"></a>NexT 主题设置</h3><p>接下来将进行 NexT 主题的设置，你可以直接编辑 <code>node_modules/hexo-theme-next/_config.yml</code>（使用 npm 安装）或 <code>themes/next/_config.yml</code>（使用 Git 安装）来修改设置。不过，这样直接修改的方式已经过时，现在， NexT 的官方博客推荐通过在博客根目录建立 <code>_config.next.yml</code> 文件来配置 NexT。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 npm 安装</span></span><br><span class="line">$ <span class="built_in">cp</span> node_modules/hexo-theme-next/_config.yml ./_config.next.yml</span><br><span class="line"><span class="comment"># 使用 Git 安装</span></span><br><span class="line">$ <span class="built_in">cp</span> themes/next/_config.yml ./_config.next.yml</span><br></pre></td></tr></table></figure>



]]></content>
  </entry>
</search>
